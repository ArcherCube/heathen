/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainRouteRouteImport } from './routes/_main/route'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as MainSettingIndexRouteImport } from './routes/_main/setting/index'
import { Route as MainHomeIndexRouteImport } from './routes/_main/home/index'
import { Route as MainArchiveUserIndexRouteImport } from './routes/_main/archive/user/index'
import { Route as MainArchiveStoreIndexRouteImport } from './routes/_main/archive/store/index'
import { Route as MainActivityListIndexRouteImport } from './routes/_main/activity/list/index'
import { Route as MainActivityDataIndexRouteImport } from './routes/_main/activity/data/index'
import { Route as MainArchiveUserCreateIndexRouteImport } from './routes/_main/archive/user/create/index'
import { Route as MainArchiveStoreCreateIndexRouteImport } from './routes/_main/archive/store/create/index'
import { Route as MainActivityListCreateIndexRouteImport } from './routes/_main/activity/list/create/index'
import { Route as MainArchiveUserEditIdIndexRouteImport } from './routes/_main/archive/user/edit/$id.index'
import { Route as MainArchiveUserDetailIdIndexRouteImport } from './routes/_main/archive/user/detail/$id.index'

const MainRouteRoute = MainRouteRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const MainSettingIndexRoute = MainSettingIndexRouteImport.update({
  id: '/setting/',
  path: '/setting/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainHomeIndexRoute = MainHomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainArchiveUserIndexRoute = MainArchiveUserIndexRouteImport.update({
  id: '/archive/user/',
  path: '/archive/user/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainArchiveStoreIndexRoute = MainArchiveStoreIndexRouteImport.update({
  id: '/archive/store/',
  path: '/archive/store/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainActivityListIndexRoute = MainActivityListIndexRouteImport.update({
  id: '/activity/list/',
  path: '/activity/list/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainActivityDataIndexRoute = MainActivityDataIndexRouteImport.update({
  id: '/activity/data/',
  path: '/activity/data/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainArchiveUserCreateIndexRoute =
  MainArchiveUserCreateIndexRouteImport.update({
    id: '/archive/user/create/',
    path: '/archive/user/create/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainArchiveStoreCreateIndexRoute =
  MainArchiveStoreCreateIndexRouteImport.update({
    id: '/archive/store/create/',
    path: '/archive/store/create/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainActivityListCreateIndexRoute =
  MainActivityListCreateIndexRouteImport.update({
    id: '/activity/list/create/',
    path: '/activity/list/create/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainArchiveUserEditIdIndexRoute =
  MainArchiveUserEditIdIndexRouteImport.update({
    id: '/archive/user/edit/$id/',
    path: '/archive/user/edit/$id/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainArchiveUserDetailIdIndexRoute =
  MainArchiveUserDetailIdIndexRouteImport.update({
    id: '/archive/user/detail/$id/',
    path: '/archive/user/detail/$id/',
    getParentRoute: () => MainRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginIndexRoute
  '/home': typeof MainHomeIndexRoute
  '/setting': typeof MainSettingIndexRoute
  '/activity/data': typeof MainActivityDataIndexRoute
  '/activity/list': typeof MainActivityListIndexRoute
  '/archive/store': typeof MainArchiveStoreIndexRoute
  '/archive/user': typeof MainArchiveUserIndexRoute
  '/activity/list/create': typeof MainActivityListCreateIndexRoute
  '/archive/store/create': typeof MainArchiveStoreCreateIndexRoute
  '/archive/user/create': typeof MainArchiveUserCreateIndexRoute
  '/archive/user/detail/$id': typeof MainArchiveUserDetailIdIndexRoute
  '/archive/user/edit/$id': typeof MainArchiveUserEditIdIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginIndexRoute
  '/home': typeof MainHomeIndexRoute
  '/setting': typeof MainSettingIndexRoute
  '/activity/data': typeof MainActivityDataIndexRoute
  '/activity/list': typeof MainActivityListIndexRoute
  '/archive/store': typeof MainArchiveStoreIndexRoute
  '/archive/user': typeof MainArchiveUserIndexRoute
  '/activity/list/create': typeof MainActivityListCreateIndexRoute
  '/archive/store/create': typeof MainArchiveStoreCreateIndexRoute
  '/archive/user/create': typeof MainArchiveUserCreateIndexRoute
  '/archive/user/detail/$id': typeof MainArchiveUserDetailIdIndexRoute
  '/archive/user/edit/$id': typeof MainArchiveUserEditIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteRouteWithChildren
  '/login/': typeof LoginIndexRoute
  '/_main/home/': typeof MainHomeIndexRoute
  '/_main/setting/': typeof MainSettingIndexRoute
  '/_main/activity/data/': typeof MainActivityDataIndexRoute
  '/_main/activity/list/': typeof MainActivityListIndexRoute
  '/_main/archive/store/': typeof MainArchiveStoreIndexRoute
  '/_main/archive/user/': typeof MainArchiveUserIndexRoute
  '/_main/activity/list/create/': typeof MainActivityListCreateIndexRoute
  '/_main/archive/store/create/': typeof MainArchiveStoreCreateIndexRoute
  '/_main/archive/user/create/': typeof MainArchiveUserCreateIndexRoute
  '/_main/archive/user/detail/$id/': typeof MainArchiveUserDetailIdIndexRoute
  '/_main/archive/user/edit/$id/': typeof MainArchiveUserEditIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/home'
    | '/setting'
    | '/activity/data'
    | '/activity/list'
    | '/archive/store'
    | '/archive/user'
    | '/activity/list/create'
    | '/archive/store/create'
    | '/archive/user/create'
    | '/archive/user/detail/$id'
    | '/archive/user/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/home'
    | '/setting'
    | '/activity/data'
    | '/activity/list'
    | '/archive/store'
    | '/archive/user'
    | '/activity/list/create'
    | '/archive/store/create'
    | '/archive/user/create'
    | '/archive/user/detail/$id'
    | '/archive/user/edit/$id'
  id:
    | '__root__'
    | '/_main'
    | '/login/'
    | '/_main/home/'
    | '/_main/setting/'
    | '/_main/activity/data/'
    | '/_main/activity/list/'
    | '/_main/archive/store/'
    | '/_main/archive/user/'
    | '/_main/activity/list/create/'
    | '/_main/archive/store/create/'
    | '/_main/archive/user/create/'
    | '/_main/archive/user/detail/$id/'
    | '/_main/archive/user/edit/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRouteRoute: typeof MainRouteRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/setting/': {
      id: '/_main/setting/'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof MainSettingIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/home/': {
      id: '/_main/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof MainHomeIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/archive/user/': {
      id: '/_main/archive/user/'
      path: '/archive/user'
      fullPath: '/archive/user'
      preLoaderRoute: typeof MainArchiveUserIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/archive/store/': {
      id: '/_main/archive/store/'
      path: '/archive/store'
      fullPath: '/archive/store'
      preLoaderRoute: typeof MainArchiveStoreIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/activity/list/': {
      id: '/_main/activity/list/'
      path: '/activity/list'
      fullPath: '/activity/list'
      preLoaderRoute: typeof MainActivityListIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/activity/data/': {
      id: '/_main/activity/data/'
      path: '/activity/data'
      fullPath: '/activity/data'
      preLoaderRoute: typeof MainActivityDataIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/archive/user/create/': {
      id: '/_main/archive/user/create/'
      path: '/archive/user/create'
      fullPath: '/archive/user/create'
      preLoaderRoute: typeof MainArchiveUserCreateIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/archive/store/create/': {
      id: '/_main/archive/store/create/'
      path: '/archive/store/create'
      fullPath: '/archive/store/create'
      preLoaderRoute: typeof MainArchiveStoreCreateIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/activity/list/create/': {
      id: '/_main/activity/list/create/'
      path: '/activity/list/create'
      fullPath: '/activity/list/create'
      preLoaderRoute: typeof MainActivityListCreateIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/archive/user/edit/$id/': {
      id: '/_main/archive/user/edit/$id/'
      path: '/archive/user/edit/$id'
      fullPath: '/archive/user/edit/$id'
      preLoaderRoute: typeof MainArchiveUserEditIdIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/archive/user/detail/$id/': {
      id: '/_main/archive/user/detail/$id/'
      path: '/archive/user/detail/$id'
      fullPath: '/archive/user/detail/$id'
      preLoaderRoute: typeof MainArchiveUserDetailIdIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
  }
}

interface MainRouteRouteChildren {
  MainHomeIndexRoute: typeof MainHomeIndexRoute
  MainSettingIndexRoute: typeof MainSettingIndexRoute
  MainActivityDataIndexRoute: typeof MainActivityDataIndexRoute
  MainActivityListIndexRoute: typeof MainActivityListIndexRoute
  MainArchiveStoreIndexRoute: typeof MainArchiveStoreIndexRoute
  MainArchiveUserIndexRoute: typeof MainArchiveUserIndexRoute
  MainActivityListCreateIndexRoute: typeof MainActivityListCreateIndexRoute
  MainArchiveStoreCreateIndexRoute: typeof MainArchiveStoreCreateIndexRoute
  MainArchiveUserCreateIndexRoute: typeof MainArchiveUserCreateIndexRoute
  MainArchiveUserDetailIdIndexRoute: typeof MainArchiveUserDetailIdIndexRoute
  MainArchiveUserEditIdIndexRoute: typeof MainArchiveUserEditIdIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainHomeIndexRoute: MainHomeIndexRoute,
  MainSettingIndexRoute: MainSettingIndexRoute,
  MainActivityDataIndexRoute: MainActivityDataIndexRoute,
  MainActivityListIndexRoute: MainActivityListIndexRoute,
  MainArchiveStoreIndexRoute: MainArchiveStoreIndexRoute,
  MainArchiveUserIndexRoute: MainArchiveUserIndexRoute,
  MainActivityListCreateIndexRoute: MainActivityListCreateIndexRoute,
  MainArchiveStoreCreateIndexRoute: MainArchiveStoreCreateIndexRoute,
  MainArchiveUserCreateIndexRoute: MainArchiveUserCreateIndexRoute,
  MainArchiveUserDetailIdIndexRoute: MainArchiveUserDetailIdIndexRoute,
  MainArchiveUserEditIdIndexRoute: MainArchiveUserEditIdIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MainRouteRoute: MainRouteRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
